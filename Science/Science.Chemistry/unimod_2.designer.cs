//-----------------------------------------------------------------------
// Copyright 2018 Eli Lilly and Company
//
// Licensed under the Apache License, Version 2.0 (the "License");
//
// you may not use this file except in compliance with the License.
//
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>Science.Chemistry</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Silverlight</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Science.Chemistry
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.ObjectModel;
    using System.IO.IsolatedStorage;


    public partial class unimod_t
    {

        private ObservableCollection<elem_t> elementsField;

        private ObservableCollection<mod_t> modificationsField;

        private ObservableCollection<aa_t> amino_acidsField;

        private ObservableCollection<brick_t> mod_bricksField;

        private ushort majorVersionField;

        private ushort minorVersionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public unimod_t()
        {
            this.mod_bricksField = new ObservableCollection<brick_t>();
            this.amino_acidsField = new ObservableCollection<aa_t>();
            this.modificationsField = new ObservableCollection<mod_t>();
            this.elementsField = new ObservableCollection<elem_t>();
            this.majorVersionField = ((ushort)(2));
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("elem", IsNullable = false)]
        public ObservableCollection<elem_t> elements
        {
            get
            {
                return this.elementsField;
            }
            set
            {
                this.elementsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("mod", IsNullable = false)]
        public ObservableCollection<mod_t> modifications
        {
            get
            {
                return this.modificationsField;
            }
            set
            {
                this.modificationsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("aa", IsNullable = false)]
        public ObservableCollection<aa_t> amino_acids
        {
            get
            {
                return this.amino_acidsField;
            }
            set
            {
                this.amino_acidsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("brick", IsNullable = false)]
        public ObservableCollection<brick_t> mod_bricks
        {
            get
            {
                return this.mod_bricksField;
            }
            set
            {
                this.mod_bricksField = value;
            }
        }

        public ushort majorVersion
        {
            get
            {
                return this.majorVersionField;
            }
            set
            {
                this.majorVersionField = value;
            }
        }

        public ushort minorVersion
        {
            get
            {
                return this.minorVersionField;
            }
            set
            {
                this.minorVersionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimod_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimod_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimod_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimod_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimod_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimod_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimod_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimod_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimod_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimod_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimod_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimod_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimod_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimod_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimod_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimod_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class elem_t
    {

        private string titleField;

        private string full_nameField;

        private double avge_massField;

        private double mono_massField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public double avge_mass
        {
            get
            {
                return this.avge_massField;
            }
            set
            {
                this.avge_massField = value;
            }
        }

        public double mono_mass
        {
            get
            {
                return this.mono_massField;
            }
            set
            {
                this.mono_massField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(elem_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current elem_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an elem_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output elem_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out elem_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elem_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out elem_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static elem_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((elem_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current elem_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an elem_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output elem_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out elem_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elem_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out elem_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static elem_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class brick_t
    {

        private ObservableCollection<elem_ref_t> elementField;

        private string titleField;

        private string full_nameField;

        private double mono_massField;

        private bool mono_massFieldSpecified;

        private double avge_massField;

        private bool avge_massFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public brick_t()
        {
            this.elementField = new ObservableCollection<elem_ref_t>();
        }

        public ObservableCollection<elem_ref_t> element
        {
            get
            {
                return this.elementField;
            }
            set
            {
                this.elementField = value;
            }
        }

        public string title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public double mono_mass
        {
            get
            {
                return this.mono_massField;
            }
            set
            {
                this.mono_massField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mono_massSpecified
        {
            get
            {
                return this.mono_massFieldSpecified;
            }
            set
            {
                this.mono_massFieldSpecified = value;
            }
        }

        public double avge_mass
        {
            get
            {
                return this.avge_massField;
            }
            set
            {
                this.avge_massField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool avge_massSpecified
        {
            get
            {
                return this.avge_massFieldSpecified;
            }
            set
            {
                this.avge_massFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(brick_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current brick_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an brick_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output brick_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out brick_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(brick_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out brick_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static brick_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((brick_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current brick_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an brick_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output brick_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out brick_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(brick_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out brick_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static brick_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class elem_ref_t
    {

        private string symbolField;

        private string numberField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public elem_ref_t()
        {
            this.numberField = "1";
        }

        public string symbol
        {
            get
            {
                return this.symbolField;
            }
            set
            {
                this.symbolField = value;
            }
        }

        [System.ComponentModel.DefaultValueAttribute("1")]
        public string number
        {
            get
            {
                return this.numberField;
            }
            set
            {
                this.numberField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(elem_ref_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current elem_ref_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an elem_ref_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output elem_ref_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out elem_ref_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elem_ref_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out elem_ref_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static elem_ref_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((elem_ref_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current elem_ref_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an elem_ref_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output elem_ref_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out elem_ref_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elem_ref_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out elem_ref_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static elem_ref_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class aa_t
    {

        private ObservableCollection<elem_ref_t> elementField;

        private string titleField;

        private string three_letterField;

        private string full_nameField;

        private double mono_massField;

        private bool mono_massFieldSpecified;

        private double avge_massField;

        private bool avge_massFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public aa_t()
        {
            this.elementField = new ObservableCollection<elem_ref_t>();
        }

        public ObservableCollection<elem_ref_t> element
        {
            get
            {
                return this.elementField;
            }
            set
            {
                this.elementField = value;
            }
        }

        public string title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        public string three_letter
        {
            get
            {
                return this.three_letterField;
            }
            set
            {
                this.three_letterField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public double mono_mass
        {
            get
            {
                return this.mono_massField;
            }
            set
            {
                this.mono_massField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mono_massSpecified
        {
            get
            {
                return this.mono_massFieldSpecified;
            }
            set
            {
                this.mono_massFieldSpecified = value;
            }
        }

        public double avge_mass
        {
            get
            {
                return this.avge_massField;
            }
            set
            {
                this.avge_massField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool avge_massSpecified
        {
            get
            {
                return this.avge_massFieldSpecified;
            }
            set
            {
                this.avge_massFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(aa_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current aa_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an aa_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output aa_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out aa_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(aa_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out aa_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static aa_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((aa_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current aa_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an aa_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output aa_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out aa_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(aa_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out aa_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static aa_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class xref_t
    {

        private string textField;

        private xref_source_t sourceField;

        private string urlField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }

        public xref_source_t source
        {
            get
            {
                return this.sourceField;
            }
            set
            {
                this.sourceField = value;
            }
        }

        public string url
        {
            get
            {
                return this.urlField;
            }
            set
            {
                this.urlField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(xref_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current xref_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an xref_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output xref_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out xref_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(xref_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out xref_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static xref_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((xref_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current xref_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an xref_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output xref_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out xref_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(xref_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out xref_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static xref_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public enum xref_source_t
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("-")]
        Item,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PubMed PMID")]
        PubMedPMID,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CAS Registry")]
        CASRegistry,

        /// <remarks/>
        CarbBank,

        /// <remarks/>
        RESID,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Swiss-Prot")]
        SwissProt,

        /// <remarks/>
        Prosite,

        /// <remarks/>
        Entrez,

        /// <remarks/>
        Book,

        /// <remarks/>
        Journal,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Misc. URL")]
        MiscURL,

        /// <remarks/>
        FindMod,

        /// <remarks/>
        Other,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PepNeutralLoss_t))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NeutralLoss_t))]
    public partial class composition_t
    {

        private ObservableCollection<elem_ref_t> elementField;

        private string compositionField;

        private double mono_massField;

        private bool mono_massFieldSpecified;

        private double avge_massField;

        private bool avge_massFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public composition_t()
        {
            this.elementField = new ObservableCollection<elem_ref_t>();
        }

        public ObservableCollection<elem_ref_t> element
        {
            get
            {
                return this.elementField;
            }
            set
            {
                this.elementField = value;
            }
        }

        public string composition
        {
            get
            {
                return this.compositionField;
            }
            set
            {
                this.compositionField = value;
            }
        }

        public double mono_mass
        {
            get
            {
                return this.mono_massField;
            }
            set
            {
                this.mono_massField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mono_massSpecified
        {
            get
            {
                return this.mono_massFieldSpecified;
            }
            set
            {
                this.mono_massFieldSpecified = value;
            }
        }

        public double avge_mass
        {
            get
            {
                return this.avge_massField;
            }
            set
            {
                this.avge_massField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool avge_massSpecified
        {
            get
            {
                return this.avge_massFieldSpecified;
            }
            set
            {
                this.avge_massFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(composition_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current composition_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an composition_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output composition_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out composition_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(composition_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out composition_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static composition_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((composition_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current composition_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an composition_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output composition_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out composition_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(composition_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out composition_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static composition_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class PepNeutralLoss_t : composition_t
    {

        private bool requiredField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public PepNeutralLoss_t()
        {
            this.requiredField = false;
        }

        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool required
        {
            get
            {
                return this.requiredField;
            }
            set
            {
                this.requiredField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PepNeutralLoss_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PepNeutralLoss_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PepNeutralLoss_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PepNeutralLoss_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PepNeutralLoss_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PepNeutralLoss_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out PepNeutralLoss_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static PepNeutralLoss_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((PepNeutralLoss_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current PepNeutralLoss_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PepNeutralLoss_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PepNeutralLoss_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PepNeutralLoss_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PepNeutralLoss_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PepNeutralLoss_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PepNeutralLoss_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class NeutralLoss_t : composition_t
    {

        private bool flagField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public NeutralLoss_t()
        {
            this.flagField = false;
        }

        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool flag
        {
            get
            {
                return this.flagField;
            }
            set
            {
                this.flagField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NeutralLoss_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NeutralLoss_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an NeutralLoss_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NeutralLoss_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NeutralLoss_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NeutralLoss_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out NeutralLoss_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static NeutralLoss_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((NeutralLoss_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current NeutralLoss_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NeutralLoss_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NeutralLoss_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NeutralLoss_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NeutralLoss_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NeutralLoss_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NeutralLoss_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class specificity_t
    {

        private ObservableCollection<NeutralLoss_t> neutralLossField;

        private ObservableCollection<PepNeutralLoss_t> pepNeutralLossField;

        private string misc_notesField;

        private bool hiddenField;

        private string siteField;

        private position_t positionField;

        private classification_t classificationField;

        private string spec_groupField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public specificity_t()
        {
            this.pepNeutralLossField = new ObservableCollection<PepNeutralLoss_t>();
            this.neutralLossField = new ObservableCollection<NeutralLoss_t>();
            this.hiddenField = false;
            this.spec_groupField = "1";
        }

        public ObservableCollection<NeutralLoss_t> NeutralLoss
        {
            get
            {
                return this.neutralLossField;
            }
            set
            {
                this.neutralLossField = value;
            }
        }

        public ObservableCollection<PepNeutralLoss_t> PepNeutralLoss
        {
            get
            {
                return this.pepNeutralLossField;
            }
            set
            {
                this.pepNeutralLossField = value;
            }
        }

        public string misc_notes
        {
            get
            {
                return this.misc_notesField;
            }
            set
            {
                this.misc_notesField = value;
            }
        }

        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenField = value;
            }
        }

        public string site
        {
            get
            {
                return this.siteField;
            }
            set
            {
                this.siteField = value;
            }
        }

        public position_t position
        {
            get
            {
                return this.positionField;
            }
            set
            {
                this.positionField = value;
            }
        }

        public classification_t classification
        {
            get
            {
                return this.classificationField;
            }
            set
            {
                this.classificationField = value;
            }
        }

        [System.ComponentModel.DefaultValueAttribute("1")]
        public string spec_group
        {
            get
            {
                return this.spec_groupField;
            }
            set
            {
                this.spec_groupField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(specificity_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current specificity_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an specificity_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output specificity_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out specificity_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(specificity_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out specificity_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static specificity_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((specificity_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current specificity_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an specificity_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output specificity_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out specificity_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(specificity_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out specificity_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static specificity_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public enum position_t
    {

        /// <remarks/>
        Anywhere,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Any N-term")]
        AnyNterm,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Any C-term")]
        AnyCterm,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Protein N-term")]
        ProteinNterm,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Protein C-term")]
        ProteinCterm,
    }

    public enum classification_t
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("-")]
        Item,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Post-translational")]
        Posttranslational,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Co-translational")]
        Cotranslational,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pre-translational")]
        Pretranslational,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Chemical derivative")]
        Chemicalderivative,

        /// <remarks/>
        Artefact,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-linked glycosylation")]
        Nlinkedglycosylation,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("O-linked glycosylation")]
        Olinkedglycosylation,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Other glycosylation")]
        Otherglycosylation,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Synth. pep. protect. gp.")]
        Synthpepprotectgp,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Isotopic label")]
        Isotopiclabel,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Non-standard residue")]
        Nonstandardresidue,

        /// <remarks/>
        Multiple,

        /// <remarks/>
        Other,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("AA substitution")]
        AAsubstitution,
    }

    public partial class mod_t
    {

        private ObservableCollection<specificity_t> specificityField;

        private composition_t deltaField;

        private ObservableCollection<composition_t> ignoreField;

        private ObservableCollection<string> alt_nameField;

        private ObservableCollection<xref_t> xrefField;

        private string misc_notesField;

        private string titleField;

        private string full_nameField;

        private string username_of_posterField;

        private string group_of_posterField;

        private string date_time_postedField;

        private string date_time_modifiedField;

        private bool approvedField;

        private bool approvedFieldSpecified;

        private string ex_code_nameField;

        private long record_idField;

        private bool record_idFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public mod_t()
        {
            this.xrefField = new ObservableCollection<xref_t>();
            this.alt_nameField = new ObservableCollection<string>();
            this.ignoreField = new ObservableCollection<composition_t>();
            this.deltaField = new composition_t();
            this.specificityField = new ObservableCollection<specificity_t>();
        }

        public ObservableCollection<specificity_t> specificity
        {
            get
            {
                return this.specificityField;
            }
            set
            {
                this.specificityField = value;
            }
        }

        public composition_t delta
        {
            get
            {
                return this.deltaField;
            }
            set
            {
                this.deltaField = value;
            }
        }

        public ObservableCollection<composition_t> Ignore
        {
            get
            {
                return this.ignoreField;
            }
            set
            {
                this.ignoreField = value;
            }
        }

        public ObservableCollection<string> alt_name
        {
            get
            {
                return this.alt_nameField;
            }
            set
            {
                this.alt_nameField = value;
            }
        }

        public ObservableCollection<xref_t> xref
        {
            get
            {
                return this.xrefField;
            }
            set
            {
                this.xrefField = value;
            }
        }

        public string misc_notes
        {
            get
            {
                return this.misc_notesField;
            }
            set
            {
                this.misc_notesField = value;
            }
        }

        public string title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public string username_of_poster
        {
            get
            {
                return this.username_of_posterField;
            }
            set
            {
                this.username_of_posterField = value;
            }
        }

        public string group_of_poster
        {
            get
            {
                return this.group_of_posterField;
            }
            set
            {
                this.group_of_posterField = value;
            }
        }

        public string date_time_posted
        {
            get
            {
                return this.date_time_postedField;
            }
            set
            {
                this.date_time_postedField = value;
            }
        }

        public string date_time_modified
        {
            get
            {
                return this.date_time_modifiedField;
            }
            set
            {
                this.date_time_modifiedField = value;
            }
        }

        public bool approved
        {
            get
            {
                return this.approvedField;
            }
            set
            {
                this.approvedField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvedSpecified
        {
            get
            {
                return this.approvedFieldSpecified;
            }
            set
            {
                this.approvedFieldSpecified = value;
            }
        }

        public string ex_code_name
        {
            get
            {
                return this.ex_code_nameField;
            }
            set
            {
                this.ex_code_nameField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool record_idSpecified
        {
            get
            {
                return this.record_idFieldSpecified;
            }
            set
            {
                this.record_idFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(mod_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current mod_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an mod_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output mod_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out mod_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(mod_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out mod_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static mod_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((mod_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current mod_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an mod_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output mod_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out mod_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(mod_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out mod_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static mod_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class elements_t
    {

        private ObservableCollection<elem_t> elemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public elements_t()
        {
            this.elemField = new ObservableCollection<elem_t>();
        }

        public ObservableCollection<elem_t> elem
        {
            get
            {
                return this.elemField;
            }
            set
            {
                this.elemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(elements_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current elements_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an elements_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output elements_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out elements_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elements_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out elements_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static elements_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((elements_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current elements_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an elements_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output elements_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out elements_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elements_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out elements_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static elements_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class modifications_t
    {

        private ObservableCollection<mod_t> modField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public modifications_t()
        {
            this.modField = new ObservableCollection<mod_t>();
        }

        public ObservableCollection<mod_t> mod
        {
            get
            {
                return this.modField;
            }
            set
            {
                this.modField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(modifications_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current modifications_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an modifications_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output modifications_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out modifications_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(modifications_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out modifications_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static modifications_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((modifications_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current modifications_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an modifications_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output modifications_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out modifications_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(modifications_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out modifications_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static modifications_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class amino_acids_t
    {

        private ObservableCollection<aa_t> aaField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public amino_acids_t()
        {
            this.aaField = new ObservableCollection<aa_t>();
        }

        public ObservableCollection<aa_t> aa
        {
            get
            {
                return this.aaField;
            }
            set
            {
                this.aaField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(amino_acids_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current amino_acids_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an amino_acids_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output amino_acids_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out amino_acids_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(amino_acids_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out amino_acids_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static amino_acids_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((amino_acids_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current amino_acids_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an amino_acids_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output amino_acids_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out amino_acids_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(amino_acids_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out amino_acids_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static amino_acids_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class mod_bricks_t
    {

        private ObservableCollection<brick_t> brickField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public mod_bricks_t()
        {
            this.brickField = new ObservableCollection<brick_t>();
        }

        public ObservableCollection<brick_t> brick
        {
            get
            {
                return this.brickField;
            }
            set
            {
                this.brickField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(mod_bricks_t));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current mod_bricks_t object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an mod_bricks_t object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output mod_bricks_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out mod_bricks_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(mod_bricks_t);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out mod_bricks_t obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static mod_bricks_t Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((mod_bricks_t)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current mod_bricks_t object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an mod_bricks_t object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output mod_bricks_t object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out mod_bricks_t obj, out System.Exception exception)
        {
            exception = null;
            obj = default(mod_bricks_t);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out mod_bricks_t obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static mod_bricks_t LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
