//-----------------------------------------------------------------------
// Copyright 2018 Eli Lilly and Company
//
// Licensed under the Apache License, Version 2.0 (the "License");
//
// you may not use this file except in compliance with the License.
//
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>Science.Chemistry</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Silverlight</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Science.Chemistry
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.IO.IsolatedStorage;


    public partial class unimod
    {

        private List<unimodAlt_names_row> alt_namesField;

        private List<unimodAmino_acids_row> amino_acidsField;

        private List<unimodBrick2element_row> brick2elementField;

        private List<unimodBricks_row> bricksField;

        private List<unimodClassifications_row> classificationsField;

        private List<unimodElements_row> elementsField;

        private List<unimodFragment_comp_row> fragment_compField;

        private List<unimodFragments_row> fragmentsField;

        private List<unimodMod2brick_row> mod2brickField;

        private List<unimodModifications_row> modificationsField;

        private List<unimodNeutral_losses_row> neutral_lossesField;

        private List<unimodPositions_row> positionsField;

        private List<unimodSpec2nl_row> spec2nlField;

        private List<unimodSpecificity_row> specificityField;

        private List<unimodXref_sources_row> xref_sourcesField;

        private List<unimodXrefs_row> xrefsField;

        private ushort majorVersionField;

        private ushort minorVersionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public unimod()
        {
            this.xrefsField = new List<unimodXrefs_row>();
            this.xref_sourcesField = new List<unimodXref_sources_row>();
            this.specificityField = new List<unimodSpecificity_row>();
            this.spec2nlField = new List<unimodSpec2nl_row>();
            this.positionsField = new List<unimodPositions_row>();
            this.neutral_lossesField = new List<unimodNeutral_losses_row>();
            this.modificationsField = new List<unimodModifications_row>();
            this.mod2brickField = new List<unimodMod2brick_row>();
            this.fragmentsField = new List<unimodFragments_row>();
            this.fragment_compField = new List<unimodFragment_comp_row>();
            this.elementsField = new List<unimodElements_row>();
            this.classificationsField = new List<unimodClassifications_row>();
            this.bricksField = new List<unimodBricks_row>();
            this.brick2elementField = new List<unimodBrick2element_row>();
            this.amino_acidsField = new List<unimodAmino_acids_row>();
            this.alt_namesField = new List<unimodAlt_names_row>();
            this.majorVersionField = ((ushort)(1));
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("alt_names_row", IsNullable = false)]
        public List<unimodAlt_names_row> alt_names
        {
            get
            {
                return this.alt_namesField;
            }
            set
            {
                this.alt_namesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("amino_acids_row", IsNullable = false)]
        public List<unimodAmino_acids_row> amino_acids
        {
            get
            {
                return this.amino_acidsField;
            }
            set
            {
                this.amino_acidsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("brick2element_row", IsNullable = false)]
        public List<unimodBrick2element_row> brick2element
        {
            get
            {
                return this.brick2elementField;
            }
            set
            {
                this.brick2elementField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("bricks_row", IsNullable = false)]
        public List<unimodBricks_row> bricks
        {
            get
            {
                return this.bricksField;
            }
            set
            {
                this.bricksField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("classifications_row", IsNullable = false)]
        public List<unimodClassifications_row> classifications
        {
            get
            {
                return this.classificationsField;
            }
            set
            {
                this.classificationsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("elements_row", IsNullable = false)]
        public List<unimodElements_row> elements
        {
            get
            {
                return this.elementsField;
            }
            set
            {
                this.elementsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 6)]
        [System.Xml.Serialization.XmlArrayItemAttribute("fragment_comp_row", IsNullable = false)]
        public List<unimodFragment_comp_row> fragment_comp
        {
            get
            {
                return this.fragment_compField;
            }
            set
            {
                this.fragment_compField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 7)]
        [System.Xml.Serialization.XmlArrayItemAttribute("fragments_row", IsNullable = false)]
        public List<unimodFragments_row> fragments
        {
            get
            {
                return this.fragmentsField;
            }
            set
            {
                this.fragmentsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 8)]
        [System.Xml.Serialization.XmlArrayItemAttribute("mod2brick_row", IsNullable = false)]
        public List<unimodMod2brick_row> mod2brick
        {
            get
            {
                return this.mod2brickField;
            }
            set
            {
                this.mod2brickField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 9)]
        [System.Xml.Serialization.XmlArrayItemAttribute("modifications_row", IsNullable = false)]
        public List<unimodModifications_row> modifications
        {
            get
            {
                return this.modificationsField;
            }
            set
            {
                this.modificationsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 10)]
        [System.Xml.Serialization.XmlArrayItemAttribute("neutral_losses_row", IsNullable = false)]
        public List<unimodNeutral_losses_row> neutral_losses
        {
            get
            {
                return this.neutral_lossesField;
            }
            set
            {
                this.neutral_lossesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 11)]
        [System.Xml.Serialization.XmlArrayItemAttribute("positions_row", IsNullable = false)]
        public List<unimodPositions_row> positions
        {
            get
            {
                return this.positionsField;
            }
            set
            {
                this.positionsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("spec2nl_row", IsNullable = false)]
        public List<unimodSpec2nl_row> spec2nl
        {
            get
            {
                return this.spec2nlField;
            }
            set
            {
                this.spec2nlField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 13)]
        [System.Xml.Serialization.XmlArrayItemAttribute("specificity_row", IsNullable = false)]
        public List<unimodSpecificity_row> specificity
        {
            get
            {
                return this.specificityField;
            }
            set
            {
                this.specificityField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 14)]
        [System.Xml.Serialization.XmlArrayItemAttribute("xref_sources_row", IsNullable = false)]
        public List<unimodXref_sources_row> xref_sources
        {
            get
            {
                return this.xref_sourcesField;
            }
            set
            {
                this.xref_sourcesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 15)]
        [System.Xml.Serialization.XmlArrayItemAttribute("xrefs_row", IsNullable = false)]
        public List<unimodXrefs_row> xrefs
        {
            get
            {
                return this.xrefsField;
            }
            set
            {
                this.xrefsField = value;
            }
        }

        public ushort majorVersion
        {
            get
            {
                return this.majorVersionField;
            }
            set
            {
                this.majorVersionField = value;
            }
        }

        public ushort minorVersion
        {
            get
            {
                return this.minorVersionField;
            }
            set
            {
                this.minorVersionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimod));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimod object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimod object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimod);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimod obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimod Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimod obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimod LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodAlt_names_row
    {

        private string alt_nameField;

        private long record_idField;

        private long mod_keyField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string alt_name
        {
            get
            {
                return this.alt_nameField;
            }
            set
            {
                this.alt_nameField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public long mod_key
        {
            get
            {
                return this.mod_keyField;
            }
            set
            {
                this.mod_keyField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodAlt_names_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodAlt_names_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodAlt_names_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodAlt_names_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodAlt_names_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodAlt_names_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodAlt_names_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodAlt_names_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodAlt_names_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodAlt_names_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodAlt_names_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodAlt_names_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodAlt_names_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodAlt_names_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodAlt_names_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodAlt_names_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodAmino_acids_row
    {

        private string num_HField;

        private string num_OField;

        private string num_CField;

        private long record_idField;

        private string full_nameField;

        private string one_letterField;

        private string num_NField;

        private string three_letterField;

        private string num_SField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string num_H
        {
            get
            {
                return this.num_HField;
            }
            set
            {
                this.num_HField = value;
            }
        }

        public string num_O
        {
            get
            {
                return this.num_OField;
            }
            set
            {
                this.num_OField = value;
            }
        }

        public string num_C
        {
            get
            {
                return this.num_CField;
            }
            set
            {
                this.num_CField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public string one_letter
        {
            get
            {
                return this.one_letterField;
            }
            set
            {
                this.one_letterField = value;
            }
        }

        public string num_N
        {
            get
            {
                return this.num_NField;
            }
            set
            {
                this.num_NField = value;
            }
        }

        public string three_letter
        {
            get
            {
                return this.three_letterField;
            }
            set
            {
                this.three_letterField = value;
            }
        }

        public string num_S
        {
            get
            {
                return this.num_SField;
            }
            set
            {
                this.num_SField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodAmino_acids_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodAmino_acids_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodAmino_acids_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodAmino_acids_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodAmino_acids_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodAmino_acids_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodAmino_acids_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodAmino_acids_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodAmino_acids_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodAmino_acids_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodAmino_acids_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodAmino_acids_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodAmino_acids_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodAmino_acids_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodAmino_acids_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodAmino_acids_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodBrick2element_row
    {

        private long brick_keyField;

        private string num_elementField;

        private long record_idField;

        private string elementField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public long brick_key
        {
            get
            {
                return this.brick_keyField;
            }
            set
            {
                this.brick_keyField = value;
            }
        }

        public string num_element
        {
            get
            {
                return this.num_elementField;
            }
            set
            {
                this.num_elementField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string element
        {
            get
            {
                return this.elementField;
            }
            set
            {
                this.elementField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodBrick2element_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodBrick2element_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodBrick2element_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodBrick2element_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodBrick2element_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodBrick2element_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodBrick2element_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodBrick2element_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodBrick2element_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodBrick2element_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodBrick2element_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodBrick2element_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodBrick2element_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodBrick2element_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodBrick2element_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodBrick2element_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodBricks_row
    {

        private string brickField;

        private long record_idField;

        private string full_nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string brick
        {
            get
            {
                return this.brickField;
            }
            set
            {
                this.brickField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodBricks_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodBricks_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodBricks_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodBricks_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodBricks_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodBricks_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodBricks_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodBricks_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodBricks_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodBricks_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodBricks_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodBricks_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodBricks_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodBricks_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodBricks_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodBricks_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodClassifications_row
    {

        private long record_idField;

        private string classificationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string classification
        {
            get
            {
                return this.classificationField;
            }
            set
            {
                this.classificationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodClassifications_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodClassifications_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodClassifications_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodClassifications_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodClassifications_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodClassifications_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodClassifications_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodClassifications_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodClassifications_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodClassifications_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodClassifications_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodClassifications_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodClassifications_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodClassifications_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodClassifications_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodClassifications_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodElements_row
    {

        private double avge_massField;

        private double mono_massField;

        private long record_idField;

        private string full_nameField;

        private string elementField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public double avge_mass
        {
            get
            {
                return this.avge_massField;
            }
            set
            {
                this.avge_massField = value;
            }
        }

        public double mono_mass
        {
            get
            {
                return this.mono_massField;
            }
            set
            {
                this.mono_massField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public string element
        {
            get
            {
                return this.elementField;
            }
            set
            {
                this.elementField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodElements_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodElements_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodElements_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodElements_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodElements_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodElements_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodElements_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodElements_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodElements_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodElements_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodElements_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodElements_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodElements_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodElements_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodElements_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodElements_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodFragment_comp_row
    {

        private string brickField;

        private long record_idField;

        private long fragments_keyField;

        private string num_brickField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string brick
        {
            get
            {
                return this.brickField;
            }
            set
            {
                this.brickField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public long fragments_key
        {
            get
            {
                return this.fragments_keyField;
            }
            set
            {
                this.fragments_keyField = value;
            }
        }

        public string num_brick
        {
            get
            {
                return this.num_brickField;
            }
            set
            {
                this.num_brickField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodFragment_comp_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodFragment_comp_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodFragment_comp_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodFragment_comp_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodFragment_comp_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodFragment_comp_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodFragment_comp_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodFragment_comp_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodFragment_comp_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodFragment_comp_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodFragment_comp_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodFragment_comp_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodFragment_comp_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodFragment_comp_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodFragment_comp_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodFragment_comp_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodFragments_row
    {

        private long record_idField;

        private long mod_keyField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public long mod_key
        {
            get
            {
                return this.mod_keyField;
            }
            set
            {
                this.mod_keyField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodFragments_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodFragments_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodFragments_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodFragments_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodFragments_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodFragments_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodFragments_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodFragments_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodFragments_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodFragments_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodFragments_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodFragments_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodFragments_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodFragments_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodFragments_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodFragments_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodMod2brick_row
    {

        private string brickField;

        private long record_idField;

        private long mod_keyField;

        private string num_brickField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string brick
        {
            get
            {
                return this.brickField;
            }
            set
            {
                this.brickField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public long mod_key
        {
            get
            {
                return this.mod_keyField;
            }
            set
            {
                this.mod_keyField = value;
            }
        }

        public string num_brick
        {
            get
            {
                return this.num_brickField;
            }
            set
            {
                this.num_brickField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodMod2brick_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodMod2brick_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodMod2brick_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodMod2brick_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodMod2brick_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodMod2brick_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodMod2brick_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodMod2brick_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodMod2brick_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodMod2brick_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodMod2brick_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodMod2brick_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodMod2brick_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodMod2brick_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodMod2brick_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodMod2brick_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodModifications_row
    {

        private string misc_notesField;

        private string username_of_posterField;

        private double avge_massField;

        private double mono_massField;

        private long record_idField;

        private string full_nameField;

        private string code_nameField;

        private string date_time_modifiedField;

        private string date_time_postedField;

        private string compositionField;

        private string group_of_posterField;

        private string ex_code_nameField;

        private sbyte approvedField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string misc_notes
        {
            get
            {
                return this.misc_notesField;
            }
            set
            {
                this.misc_notesField = value;
            }
        }

        public string username_of_poster
        {
            get
            {
                return this.username_of_posterField;
            }
            set
            {
                this.username_of_posterField = value;
            }
        }

        public double avge_mass
        {
            get
            {
                return this.avge_massField;
            }
            set
            {
                this.avge_massField = value;
            }
        }

        public double mono_mass
        {
            get
            {
                return this.mono_massField;
            }
            set
            {
                this.mono_massField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string full_name
        {
            get
            {
                return this.full_nameField;
            }
            set
            {
                this.full_nameField = value;
            }
        }

        public string code_name
        {
            get
            {
                return this.code_nameField;
            }
            set
            {
                this.code_nameField = value;
            }
        }

        public string date_time_modified
        {
            get
            {
                return this.date_time_modifiedField;
            }
            set
            {
                this.date_time_modifiedField = value;
            }
        }

        public string date_time_posted
        {
            get
            {
                return this.date_time_postedField;
            }
            set
            {
                this.date_time_postedField = value;
            }
        }

        public string composition
        {
            get
            {
                return this.compositionField;
            }
            set
            {
                this.compositionField = value;
            }
        }

        public string group_of_poster
        {
            get
            {
                return this.group_of_posterField;
            }
            set
            {
                this.group_of_posterField = value;
            }
        }

        public string ex_code_name
        {
            get
            {
                return this.ex_code_nameField;
            }
            set
            {
                this.ex_code_nameField = value;
            }
        }

        public sbyte approved
        {
            get
            {
                return this.approvedField;
            }
            set
            {
                this.approvedField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodModifications_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodModifications_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodModifications_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodModifications_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodModifications_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodModifications_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodModifications_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodModifications_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodModifications_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodModifications_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodModifications_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodModifications_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodModifications_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodModifications_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodModifications_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodModifications_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodNeutral_losses_row
    {

        private string brickField;

        private long spec_keyField;

        private long record_idField;

        private string num_brickField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string brick
        {
            get
            {
                return this.brickField;
            }
            set
            {
                this.brickField = value;
            }
        }

        public long spec_key
        {
            get
            {
                return this.spec_keyField;
            }
            set
            {
                this.spec_keyField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string num_brick
        {
            get
            {
                return this.num_brickField;
            }
            set
            {
                this.num_brickField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodNeutral_losses_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodNeutral_losses_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodNeutral_losses_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodNeutral_losses_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodNeutral_losses_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodNeutral_losses_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodNeutral_losses_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodNeutral_losses_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodNeutral_losses_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodNeutral_losses_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodNeutral_losses_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodNeutral_losses_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodNeutral_losses_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodNeutral_losses_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodNeutral_losses_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodNeutral_losses_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodPositions_row
    {

        private string positionField;

        private long record_idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string position
        {
            get
            {
                return this.positionField;
            }
            set
            {
                this.positionField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodPositions_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodPositions_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodPositions_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodPositions_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodPositions_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodPositions_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodPositions_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodPositions_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodPositions_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodPositions_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodPositions_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodPositions_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodPositions_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodPositions_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodPositions_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodPositions_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodSpec2nl_row
    {

        private long record_idField;

        private long spec_keyField;

        private string nl_compositionField;

        private double nl_mono_massField;

        private double nl_avge_massField;

        private sbyte is_pep_nlField;

        private sbyte is_req_pep_nlField;

        private sbyte is_slave_nlField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public long spec_key
        {
            get
            {
                return this.spec_keyField;
            }
            set
            {
                this.spec_keyField = value;
            }
        }

        public string nl_composition
        {
            get
            {
                return this.nl_compositionField;
            }
            set
            {
                this.nl_compositionField = value;
            }
        }

        public double nl_mono_mass
        {
            get
            {
                return this.nl_mono_massField;
            }
            set
            {
                this.nl_mono_massField = value;
            }
        }

        public double nl_avge_mass
        {
            get
            {
                return this.nl_avge_massField;
            }
            set
            {
                this.nl_avge_massField = value;
            }
        }

        public sbyte is_pep_nl
        {
            get
            {
                return this.is_pep_nlField;
            }
            set
            {
                this.is_pep_nlField = value;
            }
        }

        public sbyte is_req_pep_nl
        {
            get
            {
                return this.is_req_pep_nlField;
            }
            set
            {
                this.is_req_pep_nlField = value;
            }
        }

        public sbyte is_slave_nl
        {
            get
            {
                return this.is_slave_nlField;
            }
            set
            {
                this.is_slave_nlField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodSpec2nl_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodSpec2nl_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodSpec2nl_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodSpec2nl_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodSpec2nl_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodSpec2nl_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodSpec2nl_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodSpec2nl_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodSpec2nl_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodSpec2nl_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodSpec2nl_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodSpec2nl_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodSpec2nl_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodSpec2nl_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodSpec2nl_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodSpec2nl_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodSpecificity_row
    {

        private string misc_notesField;

        private long position_keyField;

        private long classifications_keyField;

        private long record_idField;

        private string one_letterField;

        private long mod_keyField;

        private sbyte hiddenField;

        private string spec_groupField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string misc_notes
        {
            get
            {
                return this.misc_notesField;
            }
            set
            {
                this.misc_notesField = value;
            }
        }

        public long position_key
        {
            get
            {
                return this.position_keyField;
            }
            set
            {
                this.position_keyField = value;
            }
        }

        public long classifications_key
        {
            get
            {
                return this.classifications_keyField;
            }
            set
            {
                this.classifications_keyField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string one_letter
        {
            get
            {
                return this.one_letterField;
            }
            set
            {
                this.one_letterField = value;
            }
        }

        public long mod_key
        {
            get
            {
                return this.mod_keyField;
            }
            set
            {
                this.mod_keyField = value;
            }
        }

        public sbyte hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenField = value;
            }
        }

        public string spec_group
        {
            get
            {
                return this.spec_groupField;
            }
            set
            {
                this.spec_groupField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodSpecificity_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodSpecificity_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodSpecificity_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodSpecificity_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodSpecificity_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodSpecificity_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodSpecificity_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodSpecificity_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodSpecificity_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodSpecificity_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodSpecificity_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodSpecificity_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodSpecificity_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodSpecificity_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodSpecificity_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodSpecificity_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodXref_sources_row
    {

        private long record_idField;

        private string xref_sourceField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public string xref_source
        {
            get
            {
                return this.xref_sourceField;
            }
            set
            {
                this.xref_sourceField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodXref_sources_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodXref_sources_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodXref_sources_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodXref_sources_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodXref_sources_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodXref_sources_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodXref_sources_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodXref_sources_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodXref_sources_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodXref_sources_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodXref_sources_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodXref_sources_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodXref_sources_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodXref_sources_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodXref_sources_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodXref_sources_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class unimodXrefs_row
    {

        private string xref_textField;

        private long record_idField;

        private long xref_source_keyField;

        private long mod_keyField;

        private string xref_urlField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string xref_text
        {
            get
            {
                return this.xref_textField;
            }
            set
            {
                this.xref_textField = value;
            }
        }

        public long record_id
        {
            get
            {
                return this.record_idField;
            }
            set
            {
                this.record_idField = value;
            }
        }

        public long xref_source_key
        {
            get
            {
                return this.xref_source_keyField;
            }
            set
            {
                this.xref_source_keyField = value;
            }
        }

        public long mod_key
        {
            get
            {
                return this.mod_keyField;
            }
            set
            {
                this.mod_keyField = value;
            }
        }

        public string xref_url
        {
            get
            {
                return this.xref_urlField;
            }
            set
            {
                this.xref_urlField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(unimodXrefs_row));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current unimodXrefs_row object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an unimodXrefs_row object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output unimodXrefs_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out unimodXrefs_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodXrefs_row);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out unimodXrefs_row obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static unimodXrefs_row Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((unimodXrefs_row)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current unimodXrefs_row object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Create, isoFile);
                streamWriter = new System.IO.StreamWriter(isoStream);
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                isoStream.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an unimodXrefs_row object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output unimodXrefs_row object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out unimodXrefs_row obj, out System.Exception exception)
        {
            exception = null;
            obj = default(unimodXrefs_row);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out unimodXrefs_row obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static unimodXrefs_row LoadFromFile(string fileName)
        {
            System.IO.IsolatedStorage.IsolatedStorageFile isoFile = null;
            System.IO.IsolatedStorage.IsolatedStorageFileStream isoStream = null;
            System.IO.StreamReader sr = null;
            try
            {
                isoFile = IsolatedStorageFile.GetUserStoreForApplication();
                isoStream = new System.IO.IsolatedStorage.IsolatedStorageFileStream(fileName, FileMode.Open, isoFile);
                sr = new System.IO.StreamReader(isoStream);
                string xmlString = sr.ReadToEnd();
                isoStream.Close();
                sr.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((isoFile != null))
                {
                    isoFile.Dispose();
                }
                if ((isoStream != null))
                {
                    isoStream.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
